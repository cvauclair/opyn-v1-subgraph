// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class BurnOTokens extends EthereumEvent {
  get params(): BurnOTokens__Params {
    return new BurnOTokens__Params(this);
  }
}

export class BurnOTokens__Params {
  _event: BurnOTokens;

  constructor(event: BurnOTokens) {
    this._event = event;
  }

  get vaultOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oTokensBurned(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ERC20CollateralAdded extends EthereumEvent {
  get params(): ERC20CollateralAdded__Params {
    return new ERC20CollateralAdded__Params(this);
  }
}

export class ERC20CollateralAdded__Params {
  _event: ERC20CollateralAdded;

  constructor(event: ERC20CollateralAdded) {
    this._event = event;
  }

  get vaultOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get payer(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ETHCollateralAdded extends EthereumEvent {
  get params(): ETHCollateralAdded__Params {
    return new ETHCollateralAdded__Params(this);
  }
}

export class ETHCollateralAdded__Params {
  _event: ETHCollateralAdded;

  constructor(event: ETHCollateralAdded) {
    this._event = event;
  }

  get vaultOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get payer(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Exercise extends EthereumEvent {
  get params(): Exercise__Params {
    return new Exercise__Params(this);
  }
}

export class Exercise__Params {
  _event: Exercise;

  constructor(event: Exercise) {
    this._event = event;
  }

  get amtUnderlyingToPay(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amtCollateralToPay(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get exerciser(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get vaultExercisedFrom(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class IssuedOTokens extends EthereumEvent {
  get params(): IssuedOTokens__Params {
    return new IssuedOTokens__Params(this);
  }
}

export class IssuedOTokens__Params {
  _event: IssuedOTokens;

  constructor(event: IssuedOTokens) {
    this._event = event;
  }

  get issuedTo(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oTokensIssued(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get vaultOwner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Liquidate extends EthereumEvent {
  get params(): Liquidate__Params {
    return new Liquidate__Params(this);
  }
}

export class Liquidate__Params {
  _event: Liquidate;

  constructor(event: Liquidate) {
    this._event = event;
  }

  get amtCollateralToPay(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get vaultOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get liquidator(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RedeemVaultBalance extends EthereumEvent {
  get params(): RedeemVaultBalance__Params {
    return new RedeemVaultBalance__Params(this);
  }
}

export class RedeemVaultBalance__Params {
  _event: RedeemVaultBalance;

  constructor(event: RedeemVaultBalance) {
    this._event = event;
  }

  get amtCollateralRedeemed(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amtUnderlyingRedeemed(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get vaultOwner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RemoveCollateral extends EthereumEvent {
  get params(): RemoveCollateral__Params {
    return new RemoveCollateral__Params(this);
  }
}

export class RemoveCollateral__Params {
  _event: RemoveCollateral;

  constructor(event: RemoveCollateral) {
    this._event = event;
  }

  get amtRemoved(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get vaultOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RemoveUnderlying extends EthereumEvent {
  get params(): RemoveUnderlying__Params {
    return new RemoveUnderlying__Params(this);
  }
}

export class RemoveUnderlying__Params {
  _event: RemoveUnderlying;

  constructor(event: RemoveUnderlying) {
    this._event = event;
  }

  get amountUnderlying(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get vaultOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransferFee extends EthereumEvent {
  get params(): TransferFee__Params {
    return new TransferFee__Params(this);
  }
}

export class TransferFee__Params {
  _event: TransferFee;

  constructor(event: TransferFee) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fees(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateParameters extends EthereumEvent {
  get params(): UpdateParameters__Params {
    return new UpdateParameters__Params(this);
  }
}

export class UpdateParameters__Params {
  _event: UpdateParameters;

  constructor(event: UpdateParameters) {
    this._event = event;
  }

  get liquidationIncentive(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get liquidationFactor(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get transactionFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get minCollateralizationRatio(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class VaultOpened extends EthereumEvent {
  get params(): VaultOpened__Params {
    return new VaultOpened__Params(this);
  }
}

export class VaultOpened__Params {
  _event: VaultOpened;

  constructor(event: VaultOpened) {
    this._event = event;
  }

  get vaultOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OToken__oTokenExchangeRateResult {
  value0: BigInt;
  value1: i32;

  constructor(value0: BigInt, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromI32(this.value1));
    return map;
  }
}

export class OToken__strikePriceResult {
  value0: BigInt;
  value1: i32;

  constructor(value0: BigInt, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromI32(this.value1));
    return map;
  }
}

export class OToken extends SmartContract {
  static bind(address: Address): OToken {
    return new OToken("OToken", address);
  }

  collateral(): Address {
    let result = super.call("collateral", []);

    return result[0].toAddress();
  }

  try_collateral(): CallResult<Address> {
    let result = super.tryCall("collateral", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", []);

    return result[0].toI32();
  }

  try_decimals(): CallResult<i32> {
    let result = super.tryCall("decimals", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  expiry(): BigInt {
    let result = super.call("expiry", []);

    return result[0].toBigInt();
  }

  try_expiry(): CallResult<BigInt> {
    let result = super.tryCall("expiry", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  hasExpired(): boolean {
    let result = super.call("hasExpired", []);

    return result[0].toBoolean();
  }

  try_hasExpired(): CallResult<boolean> {
    let result = super.tryCall("hasExpired", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  isExerciseWindow(): boolean {
    let result = super.call("isExerciseWindow", []);

    return result[0].toBoolean();
  }

  try_isExerciseWindow(): CallResult<boolean> {
    let result = super.tryCall("isExerciseWindow", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", []);

    return result[0].toString();
  }

  try_name(): CallResult<string> {
    let result = super.tryCall("name", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  oTokenExchangeRate(): OToken__oTokenExchangeRateResult {
    let result = super.call("oTokenExchangeRate", []);

    return new OToken__oTokenExchangeRateResult(
      result[0].toBigInt(),
      result[1].toI32()
    );
  }

  try_oTokenExchangeRate(): CallResult<OToken__oTokenExchangeRateResult> {
    let result = super.tryCall("oTokenExchangeRate", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new OToken__oTokenExchangeRateResult(
        value[0].toBigInt(),
        value[1].toI32()
      )
    );
  }

  strikePrice(): OToken__strikePriceResult {
    let result = super.call("strikePrice", []);

    return new OToken__strikePriceResult(
      result[0].toBigInt(),
      result[1].toI32()
    );
  }

  try_strikePrice(): CallResult<OToken__strikePriceResult> {
    let result = super.tryCall("strikePrice", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new OToken__strikePriceResult(value[0].toBigInt(), value[1].toI32())
    );
  }

  symbol(): string {
    let result = super.call("symbol", []);

    return result[0].toString();
  }

  try_symbol(): CallResult<string> {
    let result = super.tryCall("symbol", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): CallResult<BigInt> {
    let result = super.tryCall("totalSupply", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  underlying(): Address {
    let result = super.call("underlying", []);

    return result[0].toAddress();
  }

  try_underlying(): CallResult<Address> {
    let result = super.tryCall("underlying", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}
