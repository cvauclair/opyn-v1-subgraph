// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Trade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Trade entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Trade entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Trade", id.toString(), this);
  }

  static load(id: string): Trade | null {
    return store.get("Trade", id) as Trade | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get premium(): BigInt {
    let value = this.get("premium");
    return value.toBigInt();
  }

  set premium(value: BigInt) {
    this.set("premium", Value.fromBigInt(value));
  }

  get baseAsset(): string {
    let value = this.get("baseAsset");
    return value.toString();
  }

  set baseAsset(value: string) {
    this.set("baseAsset", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get oToken(): string {
    let value = this.get("oToken");
    return value.toString();
  }

  set oToken(value: string) {
    this.set("oToken", Value.fromString(value));
  }
}

export class Asset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Asset entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Asset entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Asset", id.toString(), this);
  }

  static load(id: string): Asset | null {
    return store.get("Asset", id) as Asset | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get options(): Array<string> {
    let value = this.get("options");
    return value.toStringArray();
  }

  set options(value: Array<string>) {
    this.set("options", Value.fromStringArray(value));
  }
}

export class OToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OToken", id.toString(), this);
  }

  static load(id: string): OToken | null {
    return store.get("OToken", id) as OToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get underlying(): string {
    let value = this.get("underlying");
    return value.toString();
  }

  set underlying(value: string) {
    this.set("underlying", Value.fromString(value));
  }

  get strikeAsset(): string {
    let value = this.get("strikeAsset");
    return value.toString();
  }

  set strikeAsset(value: string) {
    this.set("strikeAsset", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get creationBlock(): BigInt {
    let value = this.get("creationBlock");
    return value.toBigInt();
  }

  set creationBlock(value: BigInt) {
    this.set("creationBlock", Value.fromBigInt(value));
  }

  get creationTimestamp(): BigInt {
    let value = this.get("creationTimestamp");
    return value.toBigInt();
  }

  set creationTimestamp(value: BigInt) {
    this.set("creationTimestamp", Value.fromBigInt(value));
  }

  get strike(): BigDecimal {
    let value = this.get("strike");
    return value.toBigDecimal();
  }

  set strike(value: BigDecimal) {
    this.set("strike", Value.fromBigDecimal(value));
  }

  get expiration(): BigInt {
    let value = this.get("expiration");
    return value.toBigInt();
  }

  set expiration(value: BigInt) {
    this.set("expiration", Value.fromBigInt(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get numTrades(): BigInt {
    let value = this.get("numTrades");
    return value.toBigInt();
  }

  set numTrades(value: BigInt) {
    this.set("numTrades", Value.fromBigInt(value));
  }

  get trades(): Array<string> {
    let value = this.get("trades");
    return value.toStringArray();
  }

  set trades(value: Array<string>) {
    this.set("trades", Value.fromStringArray(value));
  }

  get latestTrade(): string | null {
    let value = this.get("latestTrade");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestTrade(value: string | null) {
    if (value === null) {
      this.unset("latestTrade");
    } else {
      this.set("latestTrade", Value.fromString(value as string));
    }
  }
}

export class OpynFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OpynFactory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OpynFactory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OpynFactory", id.toString(), this);
  }

  static load(id: string): OpynFactory | null {
    return store.get("OpynFactory", id) as OpynFactory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get numOptions(): BigInt {
    let value = this.get("numOptions");
    return value.toBigInt();
  }

  set numOptions(value: BigInt) {
    this.set("numOptions", Value.fromBigInt(value));
  }

  get options(): Array<string> {
    let value = this.get("options");
    return value.toStringArray();
  }

  set options(value: Array<string>) {
    this.set("options", Value.fromStringArray(value));
  }

  get numAssets(): BigInt {
    let value = this.get("numAssets");
    return value.toBigInt();
  }

  set numAssets(value: BigInt) {
    this.set("numAssets", Value.fromBigInt(value));
  }

  get assets(): Array<string> {
    let value = this.get("assets");
    return value.toStringArray();
  }

  set assets(value: Array<string>) {
    this.set("assets", Value.fromStringArray(value));
  }

  get totalTradeVolume(): BigInt {
    let value = this.get("totalTradeVolume");
    return value.toBigInt();
  }

  set totalTradeVolume(value: BigInt) {
    this.set("totalTradeVolume", Value.fromBigInt(value));
  }
}
